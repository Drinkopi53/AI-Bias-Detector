Metadata-Version: 2.4
Name: ai_bias_detector
Version: 0.1.0
Summary: A Python library to detect bias in AI models and datasets.
Home-page: https://github.com/user/ai-bias-detector
Author: Jules
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: pandas
Requires-Dist: scikit-learn
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# AI Bias Detector

**AI Bias Detector** adalah pustaka Python yang dirancang untuk membantu ilmuwan data, insinyur ML, dan peneliti mengidentifikasi dan memahami potensi bias dalam dataset dan model machine learning mereka. Dengan fokus pada bias yang terkait dengan atribut sensitif seperti gender, ras, dan usia, pustaka ini menyediakan alat untuk analisis dan rekomendasi mitigasi.

Proyek ini dikembangkan berdasarkan [Dokumen Persyaratan Produk (PRD) untuk MVP](./PRD-MVP.md).

## Fitur Utama (MVP)

- **Analisis Bias Dataset**: Menganalisis distribusi atribut sensitif dalam dataset (menggunakan Pandas DataFrame) untuk mengidentifikasi ketidakseimbangan representasi.
- **Analisis Bias Model**: Mengevaluasi kinerja model yang kompatibel dengan Scikit-learn di berbagai subkelompok demografis untuk mendeteksi disparitas dalam metrik seperti akurasi, presisi, dan perolehan.
- **Rekomendasi Mitigasi**: Memberikan saran yang dapat ditindaklanjuti berdasarkan temuan analisis, seperti teknik penyeimbangan ulang data atau pertimbangan untuk keadilan algoritmik.

## Instalasi

1.  Clone repositori ini ke mesin lokal Anda.
2.  Instal dependensi yang diperlukan menggunakan `pip`:

    ```bash
    pip install -r requirements.txt
    ```

## Cara Penggunaan

Berikut adalah contoh cepat tentang cara menggunakan pustaka untuk menganalisis dataset dan model.

```python
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from ai_bias_detector import DatasetAnalyzer, ModelAnalyzer, MitigationRecommender

def main():
    """Fungsi utama untuk menjalankan contoh deteksi bias."""

    # 1. Membuat Dataset Sampel dengan Bias
    #    - Lebih banyak data untuk kelompok 'A' daripada 'B'.
    #    - Kelompok 'B' memiliki korelasi yang lebih tinggi dengan hasil negatif (target=0).
    data = {
        'fitur1': [i for i in range(100)],
        'fitur2': [i % 5 for i in range(100)],
        'ras': ['A'] * 80 + ['B'] * 20,  # Ketidakseimbangan representasi
        'target': [1] * 70 + [0] * 10 + [1] * 5 + [0] * 15  # Kinerja model yang berbeda
    }
    df = pd.DataFrame(data)

    print("Contoh Alur Kerja Detektor Bias AI")
    print("=" * 40)

    # 2. Analisis Bias Dataset
    print("\nLangkah 1: Menganalisis Dataset untuk Bias Representasi...")
    dataset_analyzer = DatasetAnalyzer(df, sensitive_attributes=['ras'])
    dataset_analysis_results = dataset_analyzer.analyze()
    print(dataset_analyzer.generate_report(detailed=True))

    # 3. Melatih Model Machine Learning
    print("\nLangkah 2: Melatih Model Klasifikasi Sederhana...")
    X = df[['fitur1', 'fitur2']]
    y = df['target']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    # Gabungkan kembali untuk analisis model karena kita memerlukan atribut sensitif
    test_df = X_test.copy()
    test_df['target'] = y_test
    test_df['ras'] = df.loc[X_test.index, 'ras']

    model = LogisticRegression()
    model.fit(X_train, y_train)
    print("Model berhasil dilatih.")

    # 4. Analisis Bias Model
    print("\nLangkah 3: Menganalisis Model untuk Bias Kinerja...")
    model_analyzer = ModelAnalyzer(model, test_df, target_variable='target', sensitive_attributes=['ras'])
    model_analysis_results = model_analyzer.analyze()
    print(model_analyzer.generate_report())

    # 5. Menghasilkan Rekomendasi Mitigasi
    print("\nLangkah 4: Menghasilkan Rekomendasi Mitigasi...")
    recommender = MitigationRecommender(
        dataset_analysis=dataset_analysis_results,
        model_analysis=model_analysis_results
    )
    recommendations = recommender.generate_recommendations()

    print("Rekomendasi yang Dihasilkan:")
    for rec in recommendations:
        print(f"- {rec}")

if __name__ == "__main__":
    main()
```

### Menjalankan Contoh

Untuk menjalankan skrip contoh dan melihat outputnya:

```bash
python example.py
```

## Langkah Selanjutnya

- Pengembangan modul koreksi bias otomatis.
- Integrasi dengan kerangka kerja ML lain seperti TensorFlow dan PyTorch.
- Perluasan untuk mencakup jenis bias tambahan.
- Pengembangan alat visualisasi untuk analisis.
